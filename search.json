[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards not including jockers\nWhen we initially create a deck, all cards will be present:\n\ndeck = Deck()\ndeck\n\nA, ♣; 2, ♣; 3, ♣; 4, ♣; 5, ♣; 6, ♣; 7, ♣; 8, ♣; 9, ♣; 10, ♣; J, ♣; Q, ♣; K, ♣; A, ♦; 2, ♦; 3, ♦; 4, ♦; 5, ♦; 6, ♦; 7, ♦; 8, ♦; 9, ♦; 10, ♦; J, ♦; Q, ♦; K, ♦; A, ♥; 2, ♥; 3, ♥; 4, ♥; 5, ♥; 6, ♥; 7, ♥; 8, ♥; 9, ♥; 10, ♥; J, ♥; Q, ♥; K, ♥; A, ♠; 2, ♠; 3, ♠; 4, ♠; 5, ♠; 6, ♠; 7, ♠; 8, ♠; 9, ♠; 10, ♠; J, ♠; Q, ♠; K, ♠\n\n\nThat should be 52 cards:\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits that we defined for a Card:\n\nsuits\n\n['♣', '♦', '♥', '♠']\n\n\nWe can check, say, if the Ace of Clubs is in the deck:\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))   # The K \"\\u2660\"\n\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemoves cards from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2,3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\nCard??\n\nInit signature: Card(suit: int, rank: int)\nSource:        \nclass Card:\n    \"A playing card\"\n    def __init__(self, \n                 suit: int, # An index into suits\n                 rank: int  # An index into ranks\n                 ):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return f\"{ranks[self.rank]}, {suits[self.suit]}\"\n    \n    __repr__ = __str__\nFile:           ~/Projects/GitHub/nbdev_cards/nbdev_cards/card.py\nType:           type\nSubclasses:",
    "crumbs": [
      "deck"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "print(f\"Spades: {spades}, Hearts: {hearts}, Diamonds: {diamonds}, Clubs: {clubs}\")\n\nSpades: ♠, Hearts: ♥, Diamonds: ♦, Clubs: ♣\nERROR:root:No traceback has been produced, nothing to debug.\nWe will use numbers to represent playing cards clubs anbf ranks. These are the ranks:\nsuits\n\n['♣', '♦', '♥', '♠']\nFor instance, the suit at number 0:\nsuits[0]\n\n'♣'\nThese are the ranks:\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance, the rank at index ‘1’ (note that there isn’t a card at position ‘0’ since we want the ranks to match the indeces where possible):\nranks[1]\n\n'A'\nCard(1,3)\n\n3, ♦",
    "crumbs": [
      "card -- A basic playing card"
    ]
  },
  {
    "objectID": "card.html#comparisson-operators",
    "href": "card.html#comparisson-operators",
    "title": "card – A basic playing card",
    "section": "Comparisson operators",
    "text": "Comparisson operators\n\nsource\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\nFor instance, here is a tet of equallity…\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3) )\n\n\nsource\n\n\nCard.__lt__\n\n Card.__lt__ (a:__main__.Card)\n\nReturn self&lt;value.\nand a test of &lt; …\n\nassert Card(suit=1, rank=3) &lt; Card(suit=2, rank=3)\n\n\nsource\n\n\nCard.__gt__\n\n Card.__gt__ (a:__main__.Card)\n\nReturn self&gt;value.\n… and finaly of &gt;:\n\nassert Card(suit=3, rank=3) &gt; Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) &gt; Card(suit=2, rank=3)\n\nHere is an example of creating and displaying a card\n\nc = Card(suit=1, rank=3)\n\n\nc\n\n3, ♦\n\n\n\nprint(c)\n\n3, ♦\n\n\n\nsource\n\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\nEquality, less than, and greater than work on the rank and siuit indices:\n\nc = Card(suit=1, rank=3)",
    "crumbs": [
      "card -- A basic playing card"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "make sure nbdev_cards package is installed in development mode",
    "section": "",
    "text": "# nbdev_cards\nA deck of cards demo of nbdev based on ideas from Think Python 2nd Edition by Allen B. Downes\nThis file will become your README and also the index of your documentation.",
    "crumbs": [
      "make sure nbdev_cards package is installed in development mode"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "make sure nbdev_cards package is installed in development mode",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall\nInstall using:\npip install your nbdev_cards\nor:\nconda install -c fastai nbdev_cards\n\n\nInstall nbdev_cards in Development mode",
    "crumbs": [
      "make sure nbdev_cards package is installed in development mode"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "make sure nbdev_cards package is installed in development mode",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/rdned/nbdev_cards.git\nor from conda\n$ conda install -c rdned nbdev_cards\nor from pypi\n$ pip install nbdev_cards\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "make sure nbdev_cards package is installed in development mode"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "make sure nbdev_cards package is installed in development mode",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create, display, and compare playing cards:\n\nsuits\n\n['♣', '♦', '♥', '♠']\n\n\n\nCard(1,3)\n\n3, ♦",
    "crumbs": [
      "make sure nbdev_cards package is installed in development mode"
    ]
  }
]